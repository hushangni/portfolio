(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var ROWS = 25;
var COLS = 30;
var NUM_PARTICLES = ROWS * COLS,
    THICKNESS = Math.pow(100, 2),
    SPACING = 8,
    MARGIN = 100,
    COLOR = 500,
    DRAG = 0.85,
    EASE = 0.25,
    container,
    particle,
    canvas,
    mouse,
    stats,
    list,
    ctx,
    tog,
    man,
    dx,
    dy,
    mx,
    my,
    d,
    t,
    f,
    a,
    b,
    i,
    n,
    w,
    h,
    p,
    s,
    r,
    c;

particle = {
    vx: 1,
    vy: 1,
    x: 1,
    y: 1
};

var startDots = function startDots() {
    container = document.getElementById('floatdots-container');
    canvas = document.createElement('canvas');

    ctx = canvas.getContext('2d');
    man = false;
    tog = true;

    list = [];

    w = canvas.width = COLS * SPACING + MARGIN * 2;
    h = canvas.height = ROWS * SPACING + MARGIN * 2;

    container.style.marginLeft = Math.round(w * -0.1) + 'px';
    container.style.marginTop = Math.round(h * -0.1) + 'px';

    for (i = 0; i < NUM_PARTICLES; i++) {

        p = Object.create(particle);
        p.x = p.ox = MARGIN + SPACING * (i % COLS);
        p.y = p.oy = MARGIN + SPACING * Math.floor(i / COLS);

        list[i] = p;
    }

    container.addEventListener('mousemove', function (e) {

        var bounds = container.getBoundingClientRect();
        mx = e.clientX - bounds.left;
        my = e.clientY - bounds.top;
        man = true;
    });

    if (typeof Stats === 'function') {
        document.body.appendChild((stats = new Stats()).domElement);
    }
    container.appendChild(canvas);
};

var step = function step() {

    if (stats) stats.begin();

    if (tog = !tog) {

        if (!man) {

            t = +new Date() * 0.001;
            mx = w * 0.5 + Math.cos(t * 2.1) * Math.cos(t * 0.9) * w * 0.45;
            my = h * 0.5 + Math.sin(t * 3.2) * Math.tan(Math.sin(t * 0.8)) * h * 0.45;
        }

        for (i = 0; i < NUM_PARTICLES; i++) {

            p = list[i];

            d = (dx = mx - p.x) * dx + (dy = my - p.y) * dy;
            f = -THICKNESS / d;

            if (d < THICKNESS) {
                t = Math.atan2(dy, dx);
                p.vx += f * Math.cos(t);
                p.vy += f * Math.sin(t);
            }

            p.x += (p.vx *= DRAG) + (p.ox - p.x) * EASE;
            p.y += (p.vy *= DRAG) + (p.oy - p.y) * EASE;
        }
    } else {

        b = (a = ctx.createImageData(w, h)).data;

        for (i = 0; i < NUM_PARTICLES; i++) {

            p = list[i];
            b[n = (~~p.x + ~~p.y * w) * 4] = b[n + 1] = b[n + 2] = COLOR, b[n + 3] = 255;
        }

        ctx.putImageData(a, 0, 0);
    }

    if (stats) stats.end();

    requestAnimationFrame(step);
};

document.addEventListener("DOMContentLoaded", function () {
    startDots();
    step();
    $('.nav-selection').on('click', function (e) {
        e.preventDefault();
        $('input[name=hamburger-menu]').prop('checked', false);
    });
    $('a').smoothScroll();
    AOS.init({
        duration: 900
    });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
